#!/usr/bin/env python
"""
Usage: share [--version] [--help] <command> [<args>...]

Options:
  -h, --help  Show this screen.
  -v, --version  Show version.

Commands:
    harvest      Run the harvester for a specific source config
    transform    Transform the given files with a specific source config
    sources      Print a list of installed source configs

See 'share <command> --help' for more information on a specific command.
"""
import sys
sys.path.insert(0, '')

import os
import re
import json
from pprint import pprint
from datetime import timedelta

import pendulum
from docopt import docopt

import django
from django.apps import apps
from django.conf import settings

from share.transform.chain import ctx

__version__ = 'share 0.0.0'


def command(func):
    def inner(argv):
        parsed = docopt(func.__doc__, version=__version__, argv=argv)
        django.setup()
        return func(parsed, argv)
    inner.is_command = True
    return inner


@command
def fetch(args, argv):
    """
    Usage: share fetch <sourceconfig> [<date> | --start=YYYY-MM-DD --end=YYYY-MM-DD] [--limit=LIMIT] [--print | --out=DIR] [--set-spec=SET]

    Fetch data to disk or stdout, using the specified SourceConfig.

    Options:
        -l, --limit=NUMBER      Limit the harvester to NUMBER of documents
        -p, --print             Print results to stdout rather than to a file
        -o, --out=DIR           The directory to store the fetched data in. Defaults to ./fetched/<sourceconfig>
        -s, --start=YYYY-MM-DD  The date at which to start fetching data.
        -e, --end=YYYY-MM-DD    The date at which to stop fetching data.
        -i, --ignore-disabled   Allow disabled SourceConfigs to run.
        --set-spec=SET          The OAI setSpec to limit harvesting to.
    """
    from share.models import SourceConfig

    try:
        config = SourceConfig.objects.get(label=(args['<sourceconfig>']))
    except SourceConfig.DoesNotExist:
        print('SourceConfig "{}" not found.'.format(args['<sourceconfig>']))
        return -1

    harvester = config.get_harvester(pretty=True)

    kwargs = {k: v for k, v in {
        'limit': int(args['--limit']) if args.get('--limit') else None,
        'set_spec': args.get('--set-spec'),
        'ignore_disabled': args.get('ignore_disabled'),
    }.items() if v is not None}

    if not args['<date>'] and not (args['--start'] and args['--end']):
        gen = harvester.fetch(**kwargs)
    elif args['<date>']:
        gen = harvester.fetch_date(pendulum.parse(args['<date>']), **kwargs)
    else:
        gen = harvester.fetch_date_range(pendulum.parse(args['--start']), pendulum.parse(args['--end']), **kwargs)

    if not args['--print']:
        args['--out'] = args['--out'] or os.path.join(os.curdir, 'fetched', config.label)
        os.makedirs(args['--out'], exist_ok=True)

    for result in gen:
        if args['--print']:
            print('Harvested data with identifier "{}"'.format(result.identifier))
            print(result.datum)
            print('\n')
        else:
            suffix = '.xml' if result.datum.startswith('<') else '.json'
            with open(os.path.join(args['--out'], re.sub(r'[:\\\/\?\*]', '', str(result.identifier))) + suffix, 'w') as fobj:
                fobj.write(result.datum)


@command
def harvest(args, argv):
    """
    Usage: share harvest <sourceconfig> [<date> | (--start=YYYY-MM-DD --end=YYYY-MM-DD)] [options]

    Harvest data using the specified SourceConfig.

    Options:
        -l, --limit=NUMBER      Limit the harvester to NUMBER of documents
        -s, --start=YYYY-MM-DD  The date at which to start fetching data.
        -e, --end=YYYY-MM-DD    The date at which to stop fetching data.
        -i, --ignore-disabled   Allow disabled SourceConfigs to run.
        -f, --force             Force this harvest to run.
        -a, --async             Add this harvest to the queue.
        -s, --superfluous       Re-harvest even if this harvest has already been run.
        --set-spec=SET          The OAI setSpec to limit harvesting to.
    """
    from share import tasks
    from share.models import SourceConfig
    from share.harvest.scheduler import HarvestScheduler

    config = SourceConfig.objects.get(label=(args['<sourceconfig>']))
    scheduler = HarvestScheduler(config)

    if not (args['<date>'] or args['--start'] or args['--end']):
        logs = [scheduler.today()]
    elif args['<date>']:
        logs = [scheduler.date(pendulum.parse(args['<date>']))]
    else:
        logs = scheduler.range(
            pendulum.parse(args['--start']),
            pendulum.parse(args['--end'])
        )

    kwargs = {k: v for k, v in {
        'limit': int(args['--limit']) if args.get('--limit') else None,
        'set_spec': args.get('--set-spec'),
        'ignore_disabled': args.get('ignore_disabled'),
        'force': args.get('force'),
        'superfluous': args.get('superfluous'),
    }.items() if v is not None}

    for log in logs:
        if args['--async']:
            tasks.harvest.apply_async((), {'log_id': log.id, **kwargs})
        else:
            tasks.harvest(**{'log_id': log.id, **kwargs})


@command
def transform(args, argv):
    """
    Usage: share transform <sourceconfig> FILE ...
           share transform <sourceconfig> --directory=DIR

    Options:
        -d, --directory=DIR  Transform all JSON files in DIR

    Transform all given JSON files. Results will be printed to stdout.
    """
    from share.models import SourceConfig
    config = SourceConfig.objects.get(label=args['<sourceconfig>'])
    transformer = config.get_transformer()

    if args['FILE']:
        files = args['FILE']
    else:
        files = [os.path.join(args['--directory'], x) for x in os.listdir(args['--directory']) if not x.startswith('.')]

    for name in files:
        with open(name) as fobj:
            data = fobj.read()
        from ipdb import launch_ipdb_on_exception
        with launch_ipdb_on_exception():
            print('Parsed raw data "{}" into'.format(name))
            pprint(transformer.transform(data))
            print('\n')


@command
def sources(args, argv):
    """
    Usage: share sources

    Print out a list of currently installed source configs
    """
    from share.models import SourceConfig
    for config in SourceConfig.objects.values_list('label', flat=True):
        print(config)


@command
def debug(args, argv):
    """
    Usage: share debug <sourceconfig> FILE

    """
    from share.models import SourceConfig
    config = SourceConfig.objects.get(label=args['<sourceconfig>'])
    transformer = config.get_transformer()

    with open(args['FILE']) as fobj:
        data = transformer.unwrap_data(fobj.read())

    parser = transformer.get_root_parser(data)

    def execute(data, chain):
        return chain.chain()[0].run(data)
    e = execute  # noqa

    print('\n')
    print('ctx: {}'.format(ctx))
    print('parser: {}'.format(parser))
    print('data: {}'.format(type(data)))
    print('e, execute: {}'.format(execute))
    print('transformer: {}'.format(transformer))

    import ipdb
    ipdb.set_trace()


def main():
    args = docopt(__doc__, version=__version__, options_first=True)
    func = globals().get(args['<command>'])
    if not func or not getattr(func, 'is_command', False):
        print('Invalid command "{}"'.format(args['<command>']))
        return 0

    return func([args['<command>']] + args['<args>'])


if __name__ == '__main__':
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')
    main()
